evaluationDependsOn(":persistent-enchantment")
evaluationDependsOn(":snow-settings")

fabricApi {
    configureDataGeneration {
        client = true
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

tasks.register('modifyJson') {
    doNotTrackState("Modifies JSON in build directory after resources are copied")

    def mainEntryPoints = ["net.murfgames.murftweaks.persistentenchantment.PersistentEnchantmentModule", "net.murfgames.murftweaks.snowsettings.SnowSettingsModule"]
    def clientEntryPoints = []
    def preLaunchEntryPoints = ["net.murfgames.murftweaks.persistentenchantment.PersistentEnchantmentModule", "net.murfgames.murftweaks.snowsettings.SnowSettingsModule"]
    def mixins = ["persistent-enchantment", "snow-settings"]
    doLast {
        def fabricModJson = file("$buildDir/resources/main/fabric.mod.json")

        if (!fabricModJson.exists()) {
            println "JSON file does not exist!"
            return
        }

        def json = new JsonSlurper().parse(fabricModJson)

        for (mixin in mixins) {
            json.mixins << mixin + ".mixins.json"
            json.mixins << [
                    config: mixin + ".client.mixins.json",
                    environment: "client"
            ]
        }

        for (entry in mainEntryPoints) {
            json.entrypoints.main << entry
        }

        for (entry in clientEntryPoints) {
            json.entrypoints.client << entry
        }

        for (entry in preLaunchEntryPoints) {
            json.entrypoints.preLaunch << entry
        }

        fabricModJson.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        println "Modified JSON file!"
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "murf-tweaks" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    jar {
        dependsOn tasks.named("processResources")
        dependsOn tasks.named("modifyJson")

        from(project(":persistent-enchantment").sourceSets.main.output) {
            exclude("fabric.mod.json")
        }
        from(project(":persistent-enchantment").sourceSets.client.output) {
            exclude("fabric.mod.json")
        }

        from(project(":snow-settings").sourceSets.main.output) {
            exclude("fabric.mod.json")
        }
        from(project(":snow-settings").sourceSets.client.output) {
            exclude("fabric.mod.json")
        }
    }
}

sourceSets {
    main {
        compileClasspath += project(":persistent-enchantment").sourceSets.main.output
        runtimeClasspath += project(":persistent-enchantment").sourceSets.main.output

        compileClasspath += project(":snow-settings").sourceSets.main.output
        runtimeClasspath += project(":snow-settings").sourceSets.main.output
    }
    client {
        compileClasspath += project(":persistent-enchantment").sourceSets.main.output
        runtimeClasspath += project(":persistent-enchantment").sourceSets.main.output
        compileClasspath += project(":persistent-enchantment").sourceSets.client.output
        runtimeClasspath += project(":persistent-enchantment").sourceSets.client.output

        compileClasspath += project(":snow-settings").sourceSets.main.output
        runtimeClasspath += project(":snow-settings").sourceSets.main.output
        compileClasspath += project(":snow-settings").sourceSets.client.output
        runtimeClasspath += project(":snow-settings").sourceSets.client.output
    }
}

dependencies {
    implementation project(path: ":persistent-enchantment", configuration: "namedElements")
    implementation project(path: ":snow-settings", configuration: "namedElements")
}